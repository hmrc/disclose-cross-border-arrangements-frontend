/*
 * Copyright 2020 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package services

import connectors.CrossBorderArrangementsConnector
import javax.inject.Inject
import models.{Dac6MetaData, GenericError, Validation, ValidationFailure, ValidationSuccess, XMLValidationStatus}
import uk.gov.hmrc.http.HeaderCarrier

import scala.concurrent.{ExecutionContext, Future}
import scala.xml.Elem

class IdVerificationService @Inject()(connector:  CrossBorderArrangementsConnector) {

  def verifyIds(source: String, elem: Elem, dac6MetaData: Option[Dac6MetaData])(implicit hc: HeaderCarrier, ec: ExecutionContext): Future[XMLValidationStatus] = {
    dac6MetaData match {
      case Some(Dac6MetaData("DAC6ADD", Some(arrangementId), None)) => verifyDAC6ADD(source, elem, dac6MetaData, arrangementId)
      case Some(Dac6MetaData("DAC6REP", Some(arrangementId), Some(disclosureId))) => verifyDAC6REP(source, elem, dac6MetaData, arrangementId, disclosureId)
      case _ => Future(ValidationSuccess(source, dac6MetaData))

    }


  }

  private def verifyDAC6ADD(source: String, elem: Elem, dac6MetaData: Option[Dac6MetaData], arrangmentId: String)
                           (implicit hc: HeaderCarrier, ec: ExecutionContext): Future[XMLValidationStatus] = {
    connector.verifyArrangementId(arrangmentId) map {
      case true => ValidationSuccess(source, dac6MetaData)
      case false =>
        ValidationFailure(List(GenericError(getLineNumber(elem, "ArrangementID"), "ArrangementID does not match HMRC's records")))
    }

  }

  private def verifyDAC6REP(source: String, elem: Elem, dac6MetaData: Option[Dac6MetaData], arrangementId: String, disclosureId: String)
                           (implicit hc: HeaderCarrier, ec: ExecutionContext): Future[XMLValidationStatus] = {
    connector.getSubmissionHistory("enrolmentId") map { submissionHistory =>
      val submissionContainingDisclosureId = submissionHistory.submissionDetails.find(submission => submission.disclosureID.contains(disclosureId))
      submissionContainingDisclosureId match {
        case Some(submission) => if(submission.arrangementID.contains(arrangementId)) {
          ValidationSuccess(source, dac6MetaData)
        }else ValidationFailure(List(GenericError(getLineNumber(elem, "DisclosureID"), "DisclosureID does not match the ArrangementID provided")))


        case None => ValidationFailure(List(GenericError(getLineNumber(elem, "DisclosureID"), "DisclosureID has not been generated by this individual or organisation")))

         }

    }

  }

  private def getLineNumber(xml: Elem, path: String): Int = {
    val xmlArray = xml.toString().split("\n")

    xmlArray.indexWhere(str => str.contains(path)) + 1
  }


}
